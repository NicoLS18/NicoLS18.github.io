---
title: "Changes to my Website"
author: "Nicolas Laub-Sabater"
subtitle: "05/08/2025"
format:
  revealjs:
    scrollable: true
    slide-number: true
    show-slide-number: all
    embed-resources: true
execute:
  echo: true
  warning: false
  message: false
---

```{r, echo=FALSE}
library(dplyr)
library(purrr)
library(ggplot2)
library(shiny)
library(tibble)
library(rsconnect)
```

## **Overall Changes I Made to my Website**

-   Substantially improved my citations\
-   Added notes within my code to make it clearer
-   Added code folding to all projects and overall cleaned up the presentation
-   Edited introductions so they had a professional tone and appearance
-   Adjusted home page to describe my current skills and career interests
-   Added Resume

## **Creating a new Simulation**

-   Initially created a simulation about my odds to receive a single.
    -   Insufficient information and an overload of variables hindered simulation value
    -   Additionally overall lack of clarity throughout project
-   Instead I chose to get a better understanding of the Pomona Baseball teams success

![Pomona Pitzer Baseball sweeping ETBU to head to their first ever College World Series Appearance](BSBLwin.png)

![](BSBLwin.png){width="800" style="display: block; margin: auto;"}

## **Leading Question**

-   Is Pomona truly underperforming the year after a historic run?
    -   2022 historic run to regionals
    -   2023 poor season and missed SCIAC playoffs
    -   2024 greatest run in history to NCAA World Series in Cleveland
    -   2025 sentiments of a let down season (although ended up finishing strong)

![Pomona Pitzer final game in Cleveland as they were eliminated by Endicott](CWSbsbl.png)

![](CWSbsbl.png){width="800" style="display: block; margin: auto;"}

## **Collecting the Data and Simulating the Season**

-   Utilized Massey Ratings to collect winning percentages https://masseyratings.com/cbase2024/ncaa-d3/ratings

```{r, echo=FALSE}
set.seed(42)  # for reproducibility

# Create a data frame with your schedule
schedule <- data.frame(
  team = c("CMS", "La Verne", "ETBU", "Occidental", "Cal Lu", "Cal Tech", "Whittier",
           "Lewis and Clark", "Pacific Lutheran", "Chapman", "Redlands", 
           "MIT", "UW La Crosse", "Tufts"),
  win_prob = c(0.56, 0.55, 0.53, 0.85, 0.60, 0.95, 0.84,
               0.71, 0.73, 0.60, 0.74,
               0.80, 0.54, 0.65),
  games = c(3, 4, 3, 3, 3, 3, 4,
            3, 2, 3, 3,
            2, 1, 3)
)

# Simulate the season
simulate_season <- function(schedule) {
  results <- schedule |>
    dplyr::rowwise() |>
    dplyr::mutate(
      wins = sum(runif(games) < win_prob),
      losses = games - wins
    ) |>
    dplyr::ungroup()
  
  # Season totals
  total_wins <- sum(results$wins)
  total_losses <- sum(results$losses)
  
  list(results = results, total_wins = total_wins, total_losses = total_losses)
}

# Run the simulation
season <- simulate_season(schedule)

# View detailed results
print(season$results)
```

## How Massey Ratings Looks

<iframe src="https://masseyratings.com/game.php?s0=614639&oid0=6286&h=0&s1=614639&oid1=0" width="100%" height="600px" style="border:none;">

</iframe>

## **Results of 1,000 Simulations**

-   After mapping the simulation 1,000 times I found the following basic stats:

```{r, echo=FALSE}


set.seed(42)  # for reproducibility

#  original schedule
schedule <- data.frame(
  team = c("CMS", "La Verne", "ETBU", "Occidental", "Cal Lu", "Cal Tech", "Whittier",
           "Lewis and Clark", "Pacific Lutheran", "Chapman", "Redlands", 
           "MIT", "UW La Crosse", "Tufts"),
  win_prob = c(0.56, 0.55, 0.53, 0.85, 0.60, 0.95, 0.84,
               0.71, 0.73, 0.60, 0.74, 
               0.80, 0.54, 0.65),
  games = c(3, 4, 3, 3, 3, 3, 4,
            3, 2, 3, 3,
            2, 1, 3)
)

# simulation function
simulate_season <- function(schedule) {
  results <- schedule |>
    rowwise() |>
    mutate(
      wins = sum(runif(games) < win_prob),
      losses = games - wins
    ) |>
    ungroup()
  
  total_wins <- sum(results$wins)
  total_losses <- sum(results$losses)
  
  tibble(total_wins = total_wins, total_losses = total_losses)
}

# Run simulation 1000 times
n_simulations <- 1000
sim_results <- map_dfr(1:n_simulations, ~simulate_season(schedule))

# Summary
summary_stats <- sim_results |>
  summarise(
    avg_wins = mean(total_wins),
    sd_wins = sd(total_wins),
    median_wins=median(total_wins),
    max_wins = max(total_wins),
    min_wins = min(total_wins)
  )


print(summary_stats)

```

## **Graphical Presentation**

-   Created a shiny bar graph

https://nicols18.shinyapps.io/simulation/

<iframe src="https://nicols18.shinyapps.io/simulation/" width="100%" height="600px" frameborder="0">

</iframe>

## **Conclusions**
