[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi! Coming soon."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Nicolas Laub-Sabater",
    "section": "",
    "text": "Hello! My name is Nicolas Laub-Sabater and I am an economics and environmental science double major at Pomona College. I enjoy fishing, competing in different sports such as golf and in general just spending time outside. I am also Puerto Rican which has given me the opportunity to be bilingual and I have continued to cherish this gift and hope to improve it when I go abroad to Spain next semester!"
  },
  {
    "objectID": "tt2.html",
    "href": "tt2.html",
    "title": "GPT Detectors",
    "section": "",
    "text": "This data was collected in an experiment to track how effective AI detectors were at truly capturing AI created work and whether non-native english speakers were at a higher likelihood to be flagged as AI. I chose to focus solely on the effectiveness of the AI detectors as I have always assumed that they are quite good at distinguishing work that is done 100% by a human vs an AI.\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n---- Compiling #TidyTuesday Information for 2023-07-18 ----\n--- There is 1 file available ---\n\n\n── Downloading files ───────────────────────────────────────────────────────────\n\n  1 of 1: \"detectors.csv\"\n\n\n\n\n# A tibble: 7 × 2\n  detector      match_percentage\n  &lt;chr&gt;                    &lt;dbl&gt;\n1 Crossplag                 50.1\n2 GPTZero                   48.9\n3 HFOpenAI                  51.4\n4 OriginalityAI             59.0\n5 Quil                      47.8\n6 Sapling                   50  \n7 ZeroGPT                   51.7\n\n\n\n\n\n\n\n\n\nIt is interesting to see that these AI detectors are not very good at all. They are supposed to be quite good, especially at detecting when something is written 100% by AI or human. It urges the question of which side is at fault, has AI writing just advanced so much or is AI detecting simply not a very strong technology at the current moment. I have unfortunately missed the true goal of the data set but my initial interest was focused on the true capabilities of this AI detection and in my additional graphs I would focus more on the native/non-native piece of this data.\nThis information comes from the Tidy Tuesday of July 18th 2023: https://github.com/rfordatascience/tidytuesday/tree/main/data/2023/2023-07-18\nThis dataset, created by Weixin Liang, Mert Yuksekgonul, Yining Mao, Eric Wu, and James Zou, was designed to address their hypothesis that GPT detectors exhibit bias against non-native English writers. The authors aim to investigate the fairness and effectiveness of widely-used GPT detectors in distinguishing between AI-generated and human-written content. With the growing reliance on generative language models, the researchers recognize the potential for misuse and are concerned about the impact on non-native English speakers. Through evaluating GPT detectors using writing samples from both native and non-native English writers, they discovered a pattern of misclassification, where non-native English samples were often incorrectly flagged as AI-generated, while native samples were accurately identified. The study also found that simple prompting strategies could reduce this bias and bypass detectors, further highlighting the unintentional penalization of writers with limited linguistic resources. Their findings emphasize the ethical considerations of using such detectors, particularly in evaluative or educational contexts, and raise awareness about the potential exclusion of non-native English speakers from global conversations. https://arxiv.org/abs/2304.02819"
  },
  {
    "objectID": "tidytuesday.html",
    "href": "tidytuesday.html",
    "title": "Bob’s Burgers",
    "section": "",
    "text": "tuesdata &lt;- tidytuesdayR::tt_load('2024-11-19') \n\n---- Compiling #TidyTuesday Information for 2024-11-19 ----\n--- There is 1 file available ---\n\n\n── Downloading files ───────────────────────────────────────────────────────────\n\n  1 of 1: \"episode_metrics.csv\"\n\nepisode_metrics &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-11-19/episode_metrics.csv')\n\nRows: 272 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (8): season, episode, dialogue_density, avg_length, sentiment_variance, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "BobsBurger.html",
    "href": "BobsBurger.html",
    "title": "Olympics",
    "section": "",
    "text": "---- Compiling #TidyTuesday Information for 2024-08-06 ----\n--- There is 1 file available ---\n\n\n── Downloading files ───────────────────────────────────────────────────────────\n\n  1 of 1: \"olympics.csv\"\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.4     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "Olympics.html",
    "href": "Olympics.html",
    "title": "Olympics",
    "section": "",
    "text": "The following data is an overall summary of olympic athletes and their bios compiled from decades of Olympic statistics. It includes categories such as team, sport, height and weight. I have decided to take a look at the physical aspects of these athletes to see if there are any differences depending on where they come from around the globe.\n\n\n# A tibble: 271,116 × 15\n      id name     sex     age height weight team  noc   games  year season city \n   &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;\n 1     1 A Dijia… M        24    180     80 China CHN   1992…  1992 Summer Barc…\n 2     2 A Lamusi M        23    170     60 China CHN   2012…  2012 Summer Lond…\n 3     3 Gunnar … M        24     NA     NA Denm… DEN   1920…  1920 Summer Antw…\n 4     4 Edgar L… M        34     NA     NA Denm… DEN   1900…  1900 Summer Paris\n 5     5 Christi… F        21    185     82 Neth… NED   1988…  1988 Winter Calg…\n 6     5 Christi… F        21    185     82 Neth… NED   1988…  1988 Winter Calg…\n 7     5 Christi… F        25    185     82 Neth… NED   1992…  1992 Winter Albe…\n 8     5 Christi… F        25    185     82 Neth… NED   1992…  1992 Winter Albe…\n 9     5 Christi… F        27    185     82 Neth… NED   1994…  1994 Winter Lill…\n10     5 Christi… F        27    185     82 Neth… NED   1994…  1994 Winter Lill…\n# ℹ 271,106 more rows\n# ℹ 3 more variables: sport &lt;chr&gt;, event &lt;chr&gt;, medal &lt;chr&gt;\n\n\n\n\n\n\n\n\n\n\n\nAs expected there is a fairly strong relationship between height and weight although certainly some outliers exist. Interestingly these outliers tend to be from the USA although there is a bias as there are overall more USA data points than either of the other countries. Other trends that are noticeable are females tend to be lighter and shorter although there is one outlier male that may be the lightest of all the data points. Additionally, china has a larger proportion of of data points that are taller than the rest which was surprising to me as I expected that to not be the case. And of course the Americans take the trophy for heaviest people, furthering the stereotype that Americans are fat even though obviously these are elite athletes.\nThis comes from the tidy tuesday of August the 6th in 2024: https://github.com/rfordatascience/tidytuesday/blob/main/data/2024/2024-08-06/readme.md This data specifically comes from RGriffin, it offers a comprehensive historical record of the modern Olympic Games, covering every event from the first Games in Athens in 1896 up to the Rio Games in 2016. The data was collected by the author through web scraping of www.sports-reference.com in May 2018. The R code used for both scraping and cleaning the data is available on GitHub. It’s highly recommended to review the author’s kernel before starting your own analysis, as it provides valuable insights and methodologies that can enhance your work with this dataset."
  },
  {
    "objectID": "Obama.html",
    "href": "Obama.html",
    "title": "Obama",
    "section": "",
    "text": "The data used in this analysis comes from the Obama Presidential Library, specifically from their Digital Research Room. It is publicly available at:\n🔗 https://www.obamalibrary.gov/digital-research-room/archived-white-house-websites-and-social-media\nThe dataset is titled tweets.csv, which contains tweets posted from the official @POTUS Twitter account during President Barack Obama’s administration. The dataset includes columns such as the text of each tweet, timestamp, and other metadata.\nThis analysis focuses primarily on the text column, which contains the actual content of the tweets. The goal is to examine how often President Obama mentioned key policy topics, such as healthcare, climate change, and the economy, over the course of his presidency.\n\n\n# A tibble: 27,346 × 10\n   tweet_id in_reply_to_status_id in_reply_to_user_id timestamp     source text \n      &lt;dbl&gt;                 &lt;dbl&gt;               &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;  &lt;chr&gt;\n 1  7.99e17                    NA                  NA 2016-11-16 1… \"&lt;a h… \"\\\"N…\n 2  7.99e17                    NA                  NA 2016-11-16 1… \"&lt;a h… \"\\\"W…\n 3  7.99e17                    NA                  NA 2016-11-16 1… \"&lt;a h… \"\\\"T…\n 4  7.99e17                    NA                  NA 2016-11-16 1… \"&lt;a h… \"RT …\n 5  7.99e17                    NA                  NA 2016-11-16 1… \"&lt;a h… \"\\\"D…\n 6  7.99e17                    NA                  NA 2016-11-16 1… \"&lt;a h… \"\\\"W…\n 7  7.99e17                    NA                  NA 2016-11-16 1… \"&lt;a h… \"“In…\n 8  7.99e17                    NA                  NA 2016-11-16 1… \"&lt;a h… \"\\\"T…\n 9  7.99e17                    NA                  NA 2016-11-16 1… \"&lt;a h… \"“I …\n10  7.99e17                    NA                  NA 2016-11-16 1… \"&lt;a h… \"\\\"P…\n# ℹ 27,336 more rows\n# ℹ 4 more variables: retweeted_status_id &lt;dbl&gt;,\n#   retweeted_status_user_id &lt;dbl&gt;, retweeted_status_timestamp &lt;chr&gt;,\n#   expanded_urls &lt;chr&gt;\n\n\n\n\n\n\n\n\n\n\n\nThis graph illustrates which words Obama used most throughout his presidency in his tweets while not including “the”, “and”, “to”, “of”, “in”, “a”, “on”, “for”, “with”, “is”, “that”,“s”, “at”, “potus”, “rt”, “amp”, “it”,“this”, “are” and “→”. This graph is not especially helpful as the most used words are not very descriptive of what is going on in the tweets. What we can learn is that many of his tweets are about current news as he utilizes “today” heavily and they tend to be directed to a specific audience. By utilizing “we” and “our” it illustrates that Obama is not just sharing opinions but directing messages to the general public. I do not have a clear explanation why Obama and president are utilized so heavily although I assume that Obama tended to share quotes from himself or articles written which therefore would cite him.\n\n\n# A tibble: 9 × 2\n  policy      count\n  &lt;chr&gt;       &lt;int&gt;\n1 jobs          953\n2 economy       661\n3 tax           420\n4 education     399\n5 climate       318\n6 gun           272\n7 immigration   226\n8 poverty       144\n9 healthcare     46\n\n\nThe number of times each of the following words is found exactly like this in unique tweets. Eliminates taxpayers and other additions to the words. I decided to create this plot because it highlighted which political themes he addressed most heavily in his tweets and is much more useful than the earlier utilized graph. The top three results are heavily tied together so I am not surprised to see them at the top as I am sure they would all appear together in each unique tweet.\n\nobamatime &lt;- obamaa |&gt;\n  # Split the timestamp into date, time, timezone\n  separate(timestamp, into = c(\"date\", \"time\", \"timezone\"), sep = \"\\\\s+\") |&gt;\n  \n  # Clean the time column to keep only HH:MM:SS (remove any stray characters just in case)\n  mutate(time = str_replace_all(time, \"[^0-9:]\", \"\")) |&gt;  # Regular expression cleaning\n  \n  # Parse time into an HMS object and create hour and time_chunk columns\n  mutate(tlsime = hms(time),  \n         hour_of_day = hour(tlsime),  \n         time_chunk = cut(hour_of_day, breaks = seq(0, 24, by = 4), \n                          labels = c(\"00:00-03:59\", \"04:00-07:59\", \"08:00-11:59\", \n                                     \"12:00-15:59\", \"16:00-19:59\", \"20:00-23:59\"), \n                          include.lowest = TRUE)) |&gt; \n  mutate(time_chunk = factor(time_chunk, levels = c(\"00:00-03:59\", \"04:00-07:59\", \"08:00-11:59\", \n                                                    \"12:00-15:59\", \"16:00-19:59\", \"20:00-23:59\"))) |&gt;  # Fix order explicitly\n  arrange(time_chunk)  # Arrange based on the time chunk order\n\n# Now count the tweets by time of day\ntweetsbytime &lt;- obamatime |&gt;\n  count(time_chunk)  # Count tweets by time chunk\n\n# Plot the number of tweets by time of day\ntweetsbytime |&gt;\n  ggplot(aes(x = time_chunk, y = n)) +\n  geom_col(fill = \"steelblue\") +\n\n  labs(title = \"Obama Tweets by Time of Day (4-hour Chunks)\",\n       x = \"Time of Day (4-hour intervals)\",\n       y = \"Number of Tweets\")\n\n\n\n\n\n\n\n\n\nobamatime &lt;- obamatime |&gt;\n  mutate(date = as.Date(date))  # Convert date to Date class if it's not already\n\n# Extract the month and year from the date and count the tweets by month\ntweetsbymonth &lt;- obamatime |&gt;\n  mutate(month_year = format(date, \"%Y-%m\")) |&gt;  # Create a column for Year-Month\n  count(month_year)  # Count the tweets by month-year\n\n# Plot the number of tweets per month\ntweetsbymonth |&gt;\n  ggplot(aes(x = month_year, y = n)) +\n  geom_col(fill = \"steelblue\") +\n  labs(title = \"Obama Tweets by Month Over His Whole Presidency\",\n       x = \"Month-Year\",\n       y = \"Number of Tweets\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability\n\n\n\n\n\n\n\n\nI was then interested if there were specific times of the year which brought upon extra tweeting from Obama but accidentally did not group by month so I had this messy graph. I was going to delete it but I found this trend quite interesting that the longer he was in office the more tweets he was sending out so I left this even though the x-axis is unclear. That jumble of numbers is the year followed by the month. For example 2012-02.\n\ntweetsbymonth &lt;- obamatime |&gt;\n  mutate(month = format(date, \"%m\")) |&gt;  # Extract the month (as numeric)\n  count(month)  # Count the tweets by month\n\n# Plot the number of tweets per month (grouped by month)\ntweetsbymonth |&gt;\n  ggplot(aes(x = month, y = n)) +\n  geom_col(fill = \"steelblue\") +\n  labs(title = \"Obama Tweets by Month\",\n       x = \"Month\",\n       y = \"Number of Tweets\") +\n  scale_x_discrete(labels = c(\"01\" = \"January\", \"02\" = \"February\", \"03\" = \"March\", \n                              \"04\" = \"April\", \"05\" = \"May\", \"06\" = \"June\",\n                              \"07\" = \"July\", \"08\" = \"August\", \"09\" = \"September\", \n                              \"10\" = \"October\", \"11\" = \"November\", \"12\" = \"December\")) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability\n\n\n\n\n\n\n\n\nThis is the graph I was actually hoping to create earlier and found that it is much less helpful in showing any real trends. I found it interesting that January had the most tweets and maybe that was due to issuing plans or goals for the new year or possibly sharing information and reports about the inauguration. But what did surprise was that it looked like a ton of tweets were being sent by him so that led me to the following calculation just out of interest.\n\n\n[1] 10.67786\n\n\nThis function found that Obama averaged 10.68 tweets per day which seems pretty ridiculous to me although I do understand that often he was just reposting something that had been created by others. I also understand this is supposed to be an informal type of sharing information so these may be quick thoughts that he quickly types up and sends out."
  }
]